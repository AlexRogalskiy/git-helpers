#!/bin/bash

# TODO: arg-ify these
staged="staged_diff_file"
unstaged="unstaged_diff_file"
tar="diffs.tar.gz"
tar_files_file="tar_files"
added_files="added_files"
deleted_files="deleted_files"
untracked_files_to_preserve='untracked_files_to_preserve'

# This script runs remotely from within an scp'd copy with this name.
remote_script="tmp.git-unpack-and-apply-diffs"

if [ $# -eq 0 ]; then
  cur_branch_name="master"
else
  cur_branch_name="$1"
fi

echo "remote: git-unpack-and-apply-diffs!"

set -e

git reset --hard "$cur_branch_name"
git checkout "$cur_branch_name"

tar tf "$tar" > "$tar_files_file"
echo "$tar" >> "$tar_files_file"
echo "$remote_script" >> "$tar_files_file"
echo "$tar_files_file" >> "$tar_files_file"

tar mxf "$tar"

if [ -s "$staged" ]; then

  echo '*** applying staged diff'

  echo "Looking for $(wc -l "$added_files") files..."
  for f in $(cat "$added_files"); do
    if [ -f "$f" ]; then
      echo -en "\tWARNING: added file already exists and is not tracked: '$f'.. "
      if [ -n "$PROMPT_FOR_REMOVALS" ]; then
        echo "Remove? [Y/n]"
        read input
        if [ -z "$input" -o "$(echo "${input:0:1}" | tr "[:lower:]" "[:upper:]")" == "Y" ]; then
          rm -f "$f"
        else
          exit 1
        fi
      else
        rm -f "$f" && echo "Removed."
      fi
    fi
  done

  git apply "$staged"
  git add .

  if [ -s "$added_files" ]; then
    echo "Force adding files: $(cat "$added_files")"
    git add -f -- $(cat "$added_files")
  fi

  if [ -s "$deleted_files" ]; then
    echo "Force removing files: $(cat "$deleted_files")"
    git rm -f -- $(cat "$deleted_files")
  fi

  set +e
  echo "Resetting: $(cat "$tar_files_file")"
  git reset $(cat "$tar_files_file")
  set -e

fi

if [ -s "$unstaged" ]; then
  echo '*** applying unstaged diff'
  git apply "$unstaged"
fi

echo "Verifying staged diff..."
diff "$staged" <(git diff --cached)

echo "Verifying unstaged diff..."
diff "$unstaged" <(git diff)

set +e

OLD_IFS="$IFS"
IFS=$'\n'

if [ ! -f "$untracked_files_to_preserve" ]; then
  touch "$untracked_files_to_preserve"
fi
if [ -s "$untracked_files_to_preserve" -a -n "$DEBUG" ]; then
  echo "Preserving untracked files:"
  cat "$untracked_files_to_preserve" | sed "s/^/    /"
  echo
fi

# The file that lists the files that we copied up to the remote is exempt from our removal of all
# untracked git files, because we want to use it to (usually redundantly) explicitly remove those
# files, in case they slip through the first pass via being .gitignore'd, for example.
echo "$tar_files_file" >> "$untracked_files_to_preserve"

# TODO(ryan): provide options for transferring/preserving untracked git files.
echo "Removing untracked git files..."
for f in $(git ls-files --other --exclude-standard --directory --exclude-from="$untracked_files_to_preserve"); do
  rm -rf "$f"
done

# It's good to explicitly remove the files that we know we brought up to the remote; the loop
# above will take care of it, except in cases where the repo .gitignores these files (or all files
# besides a whitelist).
if [ -s "$tar_files_file" ]; then
  echo "Removing tarred transit files..."
  for f in $(cat "$tar_files_file"); do
    rm -rf "$f"
  done
fi

IFS="$OLD_IFS"
echo ""
