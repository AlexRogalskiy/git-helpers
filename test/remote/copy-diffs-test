#!/bin/bash

set -e
source "$GIT_HELPERS_HOME"/test/.helpers-rc

check_cmd() {
  # Verify that a command yields the same output in tmp1 and in its mirror/clone tmp2.
  "$@" > /dev/null
  diff <("$@") <(cd "$tmp2" && "$@")
}

# Set up a temporary "from" repo.
if [ -f ".git/shallow" ]; then
  mv .git/shallow{,.bak}
  git clone .git "$tmp1"
  mv .git/shallow{.bak,}
else
  git clone .git "$tmp1"
fi

cd "$tmp1"
prev_branch="$(git current-branch)"
if [ "$prev_branch" != "master" ]; then
  g nb master
  git branch -D "$prev_branch"
fi

# Initialize a temporary "to" repo to mirror to; perform an initial sync.
git add-mirror-remote tmp2 "$tmp2"
git copy-diffs tmp2

check_hashes() {
  git ls-files | xargs shasum
}

check_cmd check_hashes

# After an initial copy-diffs, various vital stats should be identical across the two repos.
check_cmd git status -s
check_cmd git current-branch
check_cmd git local-branches
check_cmd git for-each-ref

# Create a local branch `test`, verify that we have two local branches, `master` and `test`, and
# that tmp2 doesn't have `test` yet.
g nb test
[ "$(g current-branch)" == "test" ]

cat >expected <<EOF
master
test
EOF
diff <(git local-branches) expected
rm -f expected

# `git local-branches` returns different things between the two repos, because `test` branch hasn't
# been copied yet.
! check_cmd git local-branches

git copy-diffs tmp2
check_cmd git status -s
check_cmd git current-branch
check_cmd git local-branches
check_cmd git for-each-ref

# Switch back to `master` branch, verify that copy-diffs pushs that change to tmp2.
g co master
[ "$(g current-branch)" == "master" ]
[ "$(cd "$tmp2" && g current-branch)" == "test" ]
g copy-diffs tmp2
check_cmd git current-branch

# Initialize an untracked file `foo`; verify that tmp1 has it and tmp2 doesn't.
echo a > foo
[ "$(g lso)" == "foo" ]
[ "$(cd "$tmp2" && g lso)" == "" ]

g copy-diffs tmp2
check_cmd git status -s
check_cmd check_hashes
check_cmd g lso
check_cmd git for-each-ref


git add foo
g copy-diffs tmp2
check_cmd git status -s
check_cmd git for-each-ref
check_cmd check_hashes

echo b >> foo
g copy-diffs tmp2
check_cmd git status -s
check_cmd check_hashes
check_cmd git for-each-ref
check_cmd git diff
check_cmd git diff --cached

git commit -m "foo"
g copy-diffs tmp2
check_cmd git status -s
check_cmd check_hashes
check_cmd git for-each-ref
check_cmd git diff
check_cmd git diff --cached

# Verify that creating a branch triggers a copy of it
git reset --hard HEAD
g co master
git branch -D test
g copy-diffs tmp2
check_cmd git local-branches
