#!/usr/bin/python

"""Adds a mirrored git remote suitable for pushing local, uncommitted changes to"""

__author__ = "Ryan Williams"

import os
import subprocess
import sys

if __name__ == '__main__':
    sys.path.append('.')
from util.remotes import get_remotes

if len(sys.argv) < 3:
    print 'Usage: git add-mirror-remote <remote_name> <remote_url>'
    sys.exit(1)

remote_name = sys.argv[1]
remote_url = sys.argv[2]

subprocess.check_output(
    ['git', 'remote', 'add', '--mirror=push', remote_name, remote_url])

remotes = get_remotes()

if remote_name not in remotes:
    raise Exception('Failed to add remote %s' % remote_name)

remote = remotes[remote_name]

repo_init_commands = [
    ['git', 'init'],
    ['git', 'config', 'receive.denyCurrentBranch', 'false'],
    ['git', 'config', 'receive.denyNonFastForwards', 'false'],
    ['git', 'config', 'receive.denyDeleteCurrent', 'false'],
]

if remote.group('host'):
    remote_cmd = ' && '.join([
        'mkdir -p %s' % (remote.group('path') or '~'),
        'cd %s' % (remote.group('path') or '~'),
        ] + map(lambda cmd: cmd.join(' '), repo_init_commands)
    )

    print 'Running remote cmd: %s' % remote_cmd

    subprocess.check_output(['ssh', remote.group('host'), remote_cmd])

    print 'Done!'
else:
    print 'Initializing local repo'
    subprocess.check_output(['mkdir', '-p', remote.group('path')])
    os.chdir(remote.group('path'))
    map(subprocess.check_output, repo_init_commands)
    print 'Done!'
