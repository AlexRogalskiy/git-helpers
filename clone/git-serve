#!/usr/bin/env python

from argparse import ArgumentParser
from os import chdir
from os.path import exists
from shutil import rmtree
from subprocess import check_call
from sys import stderr
from tempfile import TemporaryDirectory


def main():
    parser = ArgumentParser()
    parser.add_argument('-p','--port',type=int,default=7777,help='Port to serve at')
    parser.add_argument('repo',default='.',nargs='?',help='Repo to clone+serve (default: current directory)')

    dst_group = parser.add_mutually_exclusive_group()
    dst_group.add_argument('--tmproot', help='Directory under which to create a temporary, bare clone to serve from')
    dst_group.add_argument('-d','--dst', help='Path at which to create a bare clone to serve from')

    parser.add_argument('-R','--no-rm',action='store_true',help="Don't remove the bare clone on exit")

    args = parser.parse_args()
    port = args.port
    repo = args.repo
    tmproot = args.tmproot
    dst = args.dst
    rm = not args.no_rm

    if tmproot:
        dir = TemporaryDirectory(dir=tmproot).name
    elif dst:
        dir = dst
        if exists(dir) and rm:
            stderr.write("Won't remove existing directory: %s" % dir)
            rm = False
    else:
        dir = TemporaryDirectory().name

    try:
        check_call(['git','clone','--bare',repo,dir])
        chdir(dir)
        check_call(['git','update-server-info'])
        check_call(['mv','hooks/post-update.sample','hooks/post-update'])
        import http.server
        import socketserver
        Handler = http.server.SimpleHTTPRequestHandler
        with socketserver.TCPServer(("", port), Handler) as httpd:
            print("serving at port", port)
            httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    finally:
        if rm:
            rmtree(dir)


if __name__ == '__main__':
    main()
