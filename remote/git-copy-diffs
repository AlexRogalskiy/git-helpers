#!/usr/bin/python

"""Mirror-push changes to a remote, forcing its local state to be identical."""

import os
from subprocess import check_call, PIPE, Popen
import sys
from tempfile import mktemp

if __name__ == '__main__':
    file_path = os.path.realpath(__file__)
    branches_dir = os.path.dirname(file_path)
    root_dir = os.path.dirname(branches_dir)
    sys.path.append(root_dir)

from util.remotes import get_mirror_remote

remote = get_mirror_remote()

print "Got remote %s at %s. Copying .git directory to %s" % (
    remote.name,
    remote.host_path_str,
    remote.path
)
print '\t' + '\n\t'.join(Popen(['rsync', '-avz', '.git', remote.path ], stdout=PIPE).communicate()[0].split('\n')[:20])
print 'Copied!'

if remote.is_local:
    curdir = os.getcwd()
    os.chdir(remote.path)
    check_call(['git', 'reset', '--hard', 'HEAD'])
    os.chdir(curdir)
else:
    remote_cmd='cd "%s" && git reset --hard HEAD' % remote.path
    check_call(['ssh', remote.host, remote_cmd])

names_file_path = mktemp()
try:
    with open(names_file_path, 'w') as names_file:
        print 'Getting staged and unstaged file names..'
        Popen(['git', 'diff', '--name-only', 'HEAD'], stdout=names_file).wait()
        Popen(['git', 'lso'], stdout=names_file).wait()
        names_file.flush()
        names_file.write('.git/index\n')

    print '\t' + '\n\t'.join(
        Popen(
            ['rsync', '-avz', '--files-from=%s' % names_file_path, './', remote.path],
            stdout=PIPE
        ).communicate()[0].split('\n')[:20]
    )

finally:
    os.remove(names_file_path)
