#!/bin/bash

# Script that `git copy-diffs` copies to and runs on a remote.
# Makes the remote's local state identical to the local/pusher's.

set +x

# TODO: arg-ify these
tar="diffs.tar.gz"

# This script runs remotely from within an scp'd copy with this name.
remote_script="tmp.git-unpack-and-apply-diffs"

if [ $# -eq 0 ]; then
  cur_branch_name="master"
else
  cur_branch_name="$1"
fi

echo "remote: git-unpack-and-apply-diffs!"

set -e

# Kill any uncommitted changes laying around before switching to the branch we should be on.
git reset --hard HEAD
git checkout "$cur_branch_name"

tmpdir="$(mktemp -d)"
finish() {
  echo "Removing tmp dir containing $(find "$tmpdir" | wc -l) files"
  rm -rf "$tmpdir"
}
trap finish EXIT

echo "untracked files:"
g lso
mv "$tar" "$tmpdir"
git rmlso
echo "after:"
g lso

pushd "$tmpdir"

tar mxf "$tar"
rm -f "$tar"

popd

staged="$tmpdir/staged_diff_file"
added_files="$tmpdir/added_files"
deleted_files="$tmpdir/deleted_files"
unstaged="$tmpdir/unstaged_diff_file"
tar="$tmpdir/diffs.tar.gz"


if [ -s "$staged" ]; then

  echo '*** applying staged diff'

  echo "Looking for $(wc -l "$added_files") files..."
  for f in $(cat "$added_files"); do
    if [ -f "$f" ]; then
      echo -en "\tWARNING: added file already exists and is not tracked: '$f'.. "
      if [ -n "$PROMPT_FOR_REMOVALS" ]; then
        echo "Remove? [Y/n]"
        read input
        if [ -z "$input" -o "$(echo "${input:0:1}" | tr "[:lower:]" "[:upper:]")" == "Y" ]; then
          rm -f "$f"
        else
          exit 1
        fi
      else
        rm -f "$f" && echo "Removed."
      fi
    fi
  done

  git apply "$staged"
  git add .

  if [ -s "$added_files" ]; then
    echo "Force adding files: $(cat "$added_files")"
    git add -f -- $(cat "$added_files")
  fi

  if [ -s "$deleted_files" ]; then
    echo "Force removing files: $(cat "$deleted_files")"
    git rm -f -- $(cat "$deleted_files")
  fi

fi

if [ -s "$unstaged" ]; then
  echo '*** applying unstaged diff'
  git apply "$unstaged"
fi

echo "Verifying staged diff..."
diff "$staged" <(git diff --cached)
rm -f "$staged" "$added_files" "$deleted_files"
echo ''

echo "Verifying unstaged diff..."
diff "$unstaged" <(git diff)
rm -f "$unstaged"
echo ''

echo "Copying untracked files from tmp dir ${tmpdir}..."
rsync -avzh --progress "$tmpdir"/ ./
echo ''
